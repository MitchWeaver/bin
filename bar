#!/bin/sh
#
# http://github.com/mitchweaver/bin
#
# bar for dwm
#

# print running VMs from qemu/virt-manager
# get_vms() {
    # note: '-a' flag may not be portable
    # pgrep -a qemu | \
    # while read -r vm ; do
    #     vm=${vm##*guest=}
    #     vm=${vm%%,*}
    #     printf '%s' "$vm"
    # done
    #
    # pgrep qemu | wc -l
# }

get_interface() {
    # interface
    winterface
}

get_vpn() {
    if pgrep openvpn >/dev/null ; then
        pia_vpn -i && vpn=" $(pia_vpn -c)"
    elif pgrep sshuttle >/dev/null ; then
        vpn=" sshvpn"
    fi
    printf '%s' "${vpn:- None}"
}

get_song() {
    song=$(song 2>/dev/null)
    case $song in
        ytsearch*|radio.html)
            song=loading...
    esac
    [ "$song" ] && printf '  [%s]' "$song"
}

get_ssid() {
    case $(get_interface) in
        eth[0-9]|enp[0-9]s[0-9][0-9])
            essid=Wired
            ;;
        *)
read _ _ _ essid <<-EOF
$(iwconfig $(get_interface) 2>/dev/null)
EOF
    esac

    case $essid in
        *':off/'*)
            ;;
        *)
            e=
            ssid=${essid%\"*}
            ssid=${ssid#*\"}
    esac
    printf '%s %s' "${e:-❌}  ${ssid:-No Internet}"
}

get_link_qual() {
iwconfig $(get_interface) 2>/dev/null | \
while read -r line ; do
    case $line in
        *'Link Quality'*)
            line=${line%/*}
            line=${line#*=}
            line=$((line * 100 / 70))
            printf '%s%%' $line
            break
    esac
done
}

get_traffic() {
    int=$(get_interface)
    if [ -f "/sys/class/net/$int/statistics/rx_bytes" ] ; then
        read rx <"/sys/class/net/$int/statistics/rx_bytes"
        read tx <"/sys/class/net/$int/statistics/tx_bytes"
    fi
    printf ' %s  %s' \
        "$(printf '%s\n' "${rx:-0}" | human)" \
        "$(printf '%s\n' "${tx:-0}" | human)"
}

# Get memory information by parsing /proc/meminfo.
# Idea from pfetch, (dylan)
#
# Formula: MemUsed = MemTotal + Shmem - MemFree - Buffers - Cached - SReclaimable
# Source: https://github.com/KittyKatt/screenFetch/issues/386
#
# Only works on Linux.
get_mem() {
    # Parse the '/proc/meminfo' file splitting on ':' and 'k'.
    # The format of the file is 'key:   000kB' and an additional
    # split is used on 'k' to filter out 'kB'.
    while IFS=':k ' read -r key val _ ; do
        case $key in
            MemTotal|Shmem) used=$((used + val)) ;;
            MemFree|Buffers|Cached|SReclaimable) used=$((used - val))
        esac
    done </proc/meminfo

    printf ' %s' "$(printf '%s\n' "$((used * 1024))"  | human)"
}

get_bat() {
    read p </sys/class/power_supply/BAT0/capacity
    read s </sys/class/power_supply/AC/online
    case $s in
        1) e='' ;;
        0) case ${p%?} in
               [8-9]|10) e='' ;;
               [6-7]) e='' ;;
               [3-5]) e='' ;;
               [1-2]) e='' ;;
                   *) e=''
           esac
    esac
    printf "$e  %s%%" $p
}

get_vol() {
    v=$(vol)
    case ${v%??} in
        [7-9]) e='' ;;
        [2-6]) e='' ;;
            *) e=''
    esac
    printf "$e %s" "$v"
}

get_space() {
    df -h | while read _ _ _ a _ p ; do
        case $p in
            /home) printf ' %s' $a
        esac
    done
}

print_info() {
    # delimiter
    D='  '
    ###### D='⚫'
    printf "%s$D%s$D%s$D%s$D%s$D%s$D%s$D%s$D%s\n" \
        "$(get_song)" \
        "$(get_vpn)" \
        "$(get_ssid)$(get_link_qual)" \
        "$(get_traffic)" \
        "$(get_mem)" \
        "$(get_space)" \
        "$(get_bat)" \
        "$(get_vol)" \
        "$(date "+%a %d %I:%M %p") "
}

# get_temp() {
#     read t </sys/class/thermal/thermal_zone0/temp
#     printf '%s\n' "$t"
# }

case $1 in
    -d)
        trap 'xsetroot -name killed ; exit' INT TERM
        while sleep 1 ; do
            xsetroot -name "$(print_info)"
        done
        ;;
     *)
         print_info
esac
