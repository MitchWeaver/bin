#!/bin/mksh
#
# http://github.com/mitchweaver/bin
#
# the unholy lemonbar
#

init() {
    # on exit, kill all children
    trap 'pkill -P $$' EXIT SIGINT SIGKILL SIGTERM
    LC_ALL=""

    # grab colors from pywal
    if [ -f ${HOME}/.cache/wal/colors.sh ] ; then
        . ${HOME}/.cache/wal/colors.sh
    else
        >&2 echo "Unable to load colors from pywal. Exiting."
        exit 1
    fi

    # create dir, clear if pre-existing
    [ -d /tmp/bar ] && rm -r /tmp/bar
    mkdir -p /tmp/bar

    # wait for dwm to start
    while ! pgrep dwm > /dev/null && [ ! -d /tmp/dwm_info ] ; do
        sleep 0.1
    done

    # if zero, bar is disabled
    [ $(< /tmp/dwm_info/bar_height) -eq 0 ] && exit

    # force a dwm update cycle on bar launch
    echo -n 1 > /tmp/dwm_info/check

    # get information from dwm
    gap=$(< /tmp/dwm_info/gappx)
    num_ws=$(< /tmp/dwm_info/num_ws)
    bar_h=$(< /tmp/dwm_info/bar_height)

    # get screen ratio, calculate bar size
    local res="$(xrandr --nograb --current | awk '/\*/ {print $1}' | tail -n 1)"
    local res=${res% *}
    local sw=${res%x*}
    local sh=${res#*x}
    local sw=${sw%.*}
    local sh=${sh%.*}
    w=$(( $sw - $gap * 2 ))
    x=$gap
    h=$bar_h
    
    # if gaps, gap the bar
    [ $gap -gt 0 ] && h=$(( $h + ($h / 4) ))

    # if bar on top, set y value to zero
    if [ $(< /tmp/dwm_info/top_bar) -eq 0 ] ; then
        if [ $gap -gt 0 ] ; then
            y=$(echo "$h / 5" | bc -l)
        else
            y=0
        fi
    # otherwise, it should be screenheight minus the bar height
    else
        if [ $gap -gt 0 ] ; then
            y=$(echo "$sh - $h - ($h / 2.5)" | bc -l)
        else
            y=$(( $sh - $h ))
        fi
    fi

    # display initial volume
    ${HOME}/bin/vol > /tmp/bar/vol

    # fonts
    ft1="xos4 Terminus:size=8"
    if [ $gap -eq 0 ] ; then
        ft2="Symbola:size=10"
        ft3="tewi:size=10"
        ft4="TerminusTTF Nerd Font:size=10"
        ft5="TerminusTTF Nerd Font:size=10"
    else
        ft2="Symbola:size=8"
        ft3="montecarlo:size=8"
        ft4="TerminusTTF Nerd Font:size=10"
        ft5="TerminusTTF Nerd Font:size=10"
    fi
}

# --------------- Functions ---------------------
layout() {
    case $(< /tmp/dwm_info/current_layout) in
        0) echo -n "\\uf44e" ;; # tiled
        1) echo -n "\\ue28e" ;; # floating
        2) echo -n "\\uf10c" ;; # monocle
        3) echo -n "\\uf009" ;; # grid
        4) echo -n "\\uf04c" ;; # center master
        5) echo -n "\\uf247" ;; # center floating master
        6) echo -n "\\uf302" ;; # fibonacci
        7) echo -n "\\uf037" ;; # top master
    esac 2> /dev/null
} 

wksp() {
    if [ $(< /tmp/dwm_info/check) -eq 1 ] ; then
        for i in $(seq $num_ws || jot $num_ws) ; do

            if [ $(< /tmp/dwm_info/ws"$i") -eq 1 ] ; then
                local ws=" %{F$color2}$i%{F-} "
            else
                local ws=" $i "
            fi

            if [ $(< /tmp/dwm_info/current_ws) -eq $i ] ; then
                local ws="%{+u}$ws"
            else
                local ws="%{-u}$ws"
            fi

            local buffer=$buffer$ws

        done
        echo -n "$buffer" > /tmp/bar/wksp
        echo -n 0 > /tmp/dwm_info/check
    fi 2> /dev/null
}

vol() { 
    local vol="$(< /tmp/bar/vol)"
    case ${vol%??} in
        10|[5-9]) echo -n "\\uf028 $vol" ;;
        [1-4])    echo -n "\\uf027 $vol" ;;
        *)        echo -n "\\uf026 $vol"
    esac
}

vpn() {
    if [ -f /tmp/vpn ] ; then
        echo -n "\\uf023 $(< /tmp/vpn)"
    else
        echo -n "\\uf09c None"
    fi
}

bat() {
    [ -f /tmp/bar/bat ] || return 
    local bat="$(< /tmp/bar/bat)"
    if [ "$bat" != NONE ] ; then
        echo -n "[ $bat ]"
    fi
}

net() {
    if [ -n "$(interface)" ] ; then
        echo -n "[ $(< /tmp/bar/net) ]"
    fi
}

# --------------- Daemons -----------------------
launch_daemons() {
    # net_daemon
    while true ; do
        if ${HOME}/bin/online ; then
            # display ssid if we have one, (wireless)
            local ssid="$(${HOME}/bin/ssid)"
            if [ -n "$ssid" ] ; then
                echo -n "\\uf1eb $ssid" > /tmp/bar/net
            else
                # we must be on ethernet
                echo -n "\\uf1eb" > /tmp/bar/net
            fi
        else
            # we're not online, display an X
            echo -n "\\uf467" > /tmp/bar/net
        fi
        sleep 10
    done > /dev/null 2>&1 &

    # music daemon
    while sleep 3 ; do
        if pgrep -x mpv > /dev/null ; then
            ${HOME}/bin/song 60 "" > /tmp/bar/song
        elif [ -f /tmp/bar/song ] ; then
            rm -f /tmp/bar/song
        fi
    done > /dev/null 2>&1 &

    # battery_daemon -- if NONE, must be on desktop
    if [ ! $(${HOME}/bin/bperc) = NONE ] ; then
        while local perc=$(${HOME}/bin/bperc) ; do
            # if plugged in
            if $(case $(uname) in
                    Linux)   test $(< /sys/class/power_supply/AC/online) -eq 1 ;;
                    OpenBSD) test $(apm -a) -eq 1
                esac)
            then
                # then display wired power symbol
                local bat="\\uf492" 
            else
                # else we are on battery, show current level
                case ${perc%?} in
                    [8-9]) local bat="\\uf240" ;;
                    [6-7]) local bat="\\uf241" ;;
                    [4-5]) local bat="\\uf242" ;;
                    [2-3]) local bat="\\uf243" ;;
                    *) local bat="\\uf244"
                esac
            fi
            echo -n "$bat $perc%" > /tmp/bar/bat
            sleep 15
        done > /dev/null 2>&1 &
    fi

    # time_daemon
    while date "+%a %b %d - %I:%M %p" > /tmp/bar/date ; do
        sleep 59
    done &
}

# ------------------ Main -----------------------
init
launch_daemons

while \
    printf " %s%b%b%b%b%b%b%b%b%b%s \\n" \
        "$(wksp)$(< /tmp/bar/wksp)%{-u} " \
        "%{T4}$(layout)" \
        "%{c}%{F$color2}%{T3}$(< /tmp/bar/song)%{F-}%{r}%{T2}%{T4}" \
        "[ CPU: $(${HOME}/bin/cpu) ]" \
        "[ MEM: $(${HOME}/bin/mem mb) ]" \
        "$(net)" \
        "[ $(vpn) ]" \
        "$(bat)" \
        "[ \\u2600 $(${HOME}/bin/bright) ]" \
        "[ %{T4}$(vol) ]" \
        "[%{F$color2}%{T4} $(< /tmp/bar/date) %{T4}]%{T-}%{F-}"
    do sleep 0.5
done 2> /dev/null | \

lemonbar -db \
         -f "$ft1" \
         -f "$ft2" \
         -f "$ft3" \
         -f "$ft4" \
         -f "$ft5" \
         -g ${w}x${h}+${x}+${y} \
         -n bar \
         -u 2 \
         -U $color2 \
         -B $color0 \
         -F $color1 \
         -a 0 > /dev/null 2>&1
