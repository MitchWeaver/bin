#!/bin/sh
#
# http://github.com/mitchweaver/bin
#
# run openvpn as a chrooted user with my settings
#

if [ "$(id -u)" -ne 0 ] ; then
    >&2 echo "must be run as root"
    exit 1
fi

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# Settings
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
OVPN_DIR=/etc/openvpn
CHROOT_DIR=/var/openvpn
CHROOT_USER=_openvpn
LOG=/var/log/openvpn.log
LOGIN=$OVPN_DIR/pia_login
CERT=$OVPN_DIR/ca.rsa.4096.crt
if [ -d /run ] ; then
    PIDFILE=/run/openvpn.pid
elif [ -d /var/run ] ; then
    PIDFILE=/var/run/openvpn.pid
fi
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

die() { >&2 printf '%s\n' "$*" ; exit 1 ; }
usage() { die 'Usage: vpn [-i] [-c] [-q] [-r]' ; }

init() {
    # create the restricted user/group if they doesn't exist
    id $CHROOT_USER >/dev/null 2>&1 || \
        useradd -m -s /sbin/nologin $CHROOT_USER
    grep "^$CHROOT_USER:" /etc/group >/dev/null || groupadd $CHROOT_USER

    if [ ! -d $CHROOT_DIR ] ; then
        mkdir $CHROOT_DIR
        chown $CHROOT_USER $CHROOT_DIR
    fi

    # double check to ensure correct permissions
    # if [ "$(id -u)" -ne 0 ] ; then
    #     if [ -r $CERT  ] || [ -r $LOGIN ] ; then
    #         >&2 echo "WARNING: Incorrect permissions on $CERT or $LOGIN!"
    #         exit 1
    #     fi
    # fi

    # disable ipv6 to prevent leaks
    sysctl -q -w net.ipv6.conf.all.disable_ipv6=1
}

get_loc() {
read -r LOC <<-EOF
$(sort -R <<EEOF
us-atlanta
us-denver
us-chicago
us-houston
us-newyorkcity
us-seattle
ca-montreal
ca-toronto
ca-vancouver
de-berlin
de-frankfurt
austria
belgium
czech
denmark
fi
france
hungary
ireland
italy
japan
mexico
nl
nz
no
poland
ro
sg
spain
sweden
swiss
EEOF
)
EOF
}

run() {
    PORT=1197
    DOMAIN=privateinternetaccess.com
    REMOTE=$LOC.$DOMAIN
    $(which openvpn) \
        --remote "$REMOTE" "$PORT" \
        --auth-user-pass "$LOGIN" \
        --ca $CERT \
        --log $LOG \
        --writepid $PIDFILE \
        --chroot $CHROOT_DIR \
        --user $CHROOT_USER \
        --group $CHROOT_USER \
        --daemon \
        --client \
        --dev tun \
        --compress lz4 \
        --cipher aes-256-cbc \
        --auth sha256 \
        --auth-nocache \
        --connect-retry 1 1 \
        --reneg-sec 0 \
        --nobind \
        --disable-occ \
        --remote-cert-tls server \
        --persist-key \
        --persist-tun \
        --persist-local-ip \
        --tmp-dir . \
        --verb 1 \
        --nice -1
}

isrunning() {
    [ -f $PIDFILE ] || return 1
    read -r pid <$PIDFILE
    ps -U "$CHROOT_USER" -p "$pid" >/dev/null
    return $?
}

current() {
    [ -f $PIDFILE ] || return 1
    read -r pid <$PIDFILE
    cmd=$(ps -xU "$CHROOT_USER" -p "$pid" -o command=)
    # shellcheck disable=2181
    if [ $? -eq 0 ] ; then
        cmd=${cmd#*--remote }
        printf '%s\n' "${cmd%%.*}"
    fi
}

stop_vpn() {
    isrunning || die "Not running."
    read -r pid <$PIDFILE
    kill -9 "$pid"
    rm $PIDFILE
}

start_vpn() {
    isrunning && die "Already running."
    init
    get_loc
    run
}

case $1 in
    -h) usage ;;
    -i) isrunning ;;
    -c) current ;;
    -q) stop_vpn ;;
    -r) stop_vpn ; start_vpn ;;
     *) start_vpn
esac
