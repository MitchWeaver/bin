#!/bin/sh -e
#
# http://github.com/mitchweaver/bin
#
# play youtube subscriptions with dmenu, mpv, and youtube-dl
#

# -*-*-*-*-*-*- Settings -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
: ${SUBS_OPML_FILE:=~/files/subs.opml}
: ${MENU_PROG:=dmenu}
: ${MPV_OPTS:='--really-quiet --sub-auto=no'}
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

die() { >&2 printf '%s\n' "$*" ; exit 1 ; }
usage() { die 'Usage: subs [-f] [-m]' ; }

while [ "$1" ] ; do
    case $1 in
        -f) SUBS_OPML_FILE=$1 ; shift ;;
        -m) MPV_OPTS="$MPV_OPTS --no-video" ; shift ;;
         *) usage
    esac
done

[ -f "$SUBS_OPML_FILE" ] || die "$SUBS_OPML_FILE does not exist"

export LC_ALL=C
TMPDIR=~/.cache/subs-$$
mkdir -p "$TMPDIR"
trap 'rm -r "$TMPDIR" 2>/dev/null' EXIT INT KILL TERM

# parse the terrible xml that is our opml subscription file
# dump the channel names and their rss links to corresponding files
cat "$SUBS_OPML_FILE" | tr '><' '\n' | \
sed -E  -e 's/" title.*.xmlUrl="/\[SEPARATOR\]/g' \
        -e 's/(outline text="|" \/)//g' \
        -e '/^$/d' \
        -e '1,7d' | \
while IFS='' read -r line ; do
    case $line in
        *[SEPARATOR]*http*)
        printf '%s\n' "$line" | sed 's|.*\[SEPARATOR\]||' >>"$TMPDIR"/rss_links
        printf '%s\n' "$line" | sed 's|\[SEPARATOR\].*||' >>"$TMPDIR"/chan_names
    esac
done

# takes a channel rss feed link and creates files of titles, urls, dates, and channels
get_vids() {
    link=$1
    num=$2
    printf '%s\n' "* fetching $link"
    curl -s -f -L --retry 3 --url $link >"$TMPDIR"/dl$num || return 1

    date="$(grep '<published>' "$TMPDIR"/dl$num | \
        sed -E -e 's/( )*<\/?published>//g' -e 's/\+.*//g' -e '1d')"

    printf '%s\n' "$date" >>"$TMPDIR"/vid_dates$num

    grep '<media:title>' "$TMPDIR"/dl$num | \
        sed -E 's/( )*<\/?media:title>//g' >>"$TMPDIR"/vid_titles$num

    grep '<media:content url=' "$TMPDIR"/dl$num | \
        sed -E -e 's/( )*<\/?media:content url="//g' \
               -e 's/" type.*//g' >>"$TMPDIR"/vid_urls$num
    case $(uname) in
        OpenBSD) nums="$(jot   $(printf '%s\n' "$date" | wc -l))" ;;
              *) nums="$(seq 1 $(printf '%s\n' "$date" | wc -l))"
    esac
    for i in $nums ; do
        sed -n "${num}p" "$TMPDIR"/chan_names >>"$TMPDIR"/vid_chans$num
    done

    rm "$TMPDIR"/dl$num
}

echo "1. fetching ..."
count=0
while IFS='' read -r link ; do
    count=$(( $count + 1 ))
    get_vids "$link" $count &
done <"$TMPDIR"/rss_links
wait

# concantenate all subfiles into collated files
case $(uname) in
    OpenBSD) nums="$(jot   $(wc -l <"$TMPDIR"/rss_links))" ;;
          *) nums="$(seq 1 $(wc -l <"$TMPDIR"/rss_links))"
esac
for i in $nums ; do
    for file in vid_dates vid_chans vid_titles vid_urls ; do
        if [ -f "$TMPDIR"/"$file"$i ] ; then
            cat "$TMPDIR"/"$file"$i >>"$TMPDIR"/$file
            rm "$TMPDIR"/"$file"$i
        fi
    done
done

# concantenates files side by side, line by line
# note: paste can't use multi-char delimiters, and it cant do full unicode
#       using '`' as a junk character here so it can later be split into
#       my desired delimiter with a sed replace
echo "2. concatenating ..."
paste -d '|' "$TMPDIR"/vid_dates \
             "$TMPDIR"/vid_chans \
             "$TMPDIR"/vid_titles \
             "$TMPDIR"/vid_urls >"$TMPDIR"/concat

# clean up any irregularities in the final file
sed -E -i 's/( )?<\/?media:description>.//' "$TMPDIR"/concat

# now that we have all our information in the file, since we gathered them
# channel by channel we want to collate them based on date
echo "3. sorting ..."
sort -r "$TMPDIR"/concat -o "$TMPDIR"/concat

echo 'done!'

# send through our discovered info, nicely formatted, to dmenu
choice=$(awk -F '|' '{print "["$2"]" " - " $3}' "$TMPDIR"/concat | \
    head -n 500 | $MENU_PROG -p 'Subs:' | sed -e 's/^.*- //')

[ "$choice" ] || exit 1

# read in the final concatenated file, and compare against our dmenu choice
while IFS='' read -r line ; do
    if printf '%s\n' "$line" | grep "$choice" >/dev/null ; then
        set -- $(printf '%s\n' "$line" | tr '|' ' ')
        while [ $# -ne 1 ] ; do shift ; done
        url=$(printf '%s\n' "$1" | sed 's|v/|watch?v=|')
    fi
done <"$TMPDIR"/concat

if [ "$url" ] ; then
    printf '\n%s\n%s\n' "Now playing: $choice" "$url"
    mpv $MPV_OPTS "$url" &
fi
